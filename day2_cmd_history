    1  #!/bin/bash
    2  trap '[ "$?" -eq 0 ] || read -p "Looks like something went wrong in step ´$STEP´... Press any key to continue..."' EXIT
    3  #Quick Hack: used to convert e.g. "C:\Program Files\Docker Toolbox" to "/c/Program Files/Docker Toolbox"
    4  win_to_unix_path(){  	wd="$(pwd)"; 	cd "$1"; 		the_path="$(pwd)"; 	cd "$wd"; 	echo $the_path; }
    5  # This is needed  to ensure that binaries provided
    6  # by Docker Toolbox over-ride binaries provided by
    7  # Docker for Windows when launching using the Quickstart.
    8  export PATH="$(win_to_unix_path "${DOCKER_TOOLBOX_INSTALL_PATH}"):$PATH"
    9  VM=${DOCKER_MACHINE_NAME-default}
   10  DOCKER_MACHINE="${DOCKER_TOOLBOX_INSTALL_PATH}\docker-machine.exe"
   11  STEP="Looking for vboxmanage.exe"
   12  if [ ! -z "$VBOX_MSI_INSTALL_PATH" ]; then   VBOXMANAGE="${VBOX_MSI_INSTALL_PATH}VBoxManage.exe"; else   VBOXMANAGE="${VBOX_INSTALL_PATH}VBoxManage.exe"; fi
   13  BLUE='\033[1;34m'
   14  GREEN='\033[0;32m'
   15  NC='\033[0m'
   16  #clear all_proxy if not socks address
   17  if  [[ $ALL_PROXY != socks* ]]; then   unset ALL_PROXY; fi
   18  if  [[ $all_proxy != socks* ]]; then   unset all_proxy; fi
   19  if [ ! -f "${DOCKER_MACHINE}" ]; then   echo "Docker Machine is not installed. Please re-run the Toolbox Installer and try again.";   exit 1; fi
   20  if [ ! -f "${VBOXMANAGE}" ]; then   echo "VirtualBox is not installed. Please re-run the Toolbox Installer and try again.";   exit 1; fi
   21  "${VBOXMANAGE}" list vms | grep \""${VM}"\" &> /dev/null
   22  VM_EXISTS_CODE=$?
   23  set -e
   24  STEP="Checking if machine $VM exists"
   25  if [ $VM_EXISTS_CODE -eq 1 ]; then   "${DOCKER_MACHINE}" rm -f "${VM}" &> /dev/null || :;   rm -rf ~/.docker/machine/machines/"${VM}"   if [ "${HTTP_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env HTTP_PROXY=$HTTP_PROXY";   fi;   if [ "${HTTPS_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env HTTPS_PROXY=$HTTPS_PROXY";   fi;   if [ "${NO_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env NO_PROXY=$NO_PROXY";   fi;   "${DOCKER_MACHINE}" create -d virtualbox $PROXY_ENV "${VM}"; fi
   26  STEP="Checking status on $VM"
   27  VM_STATUS="$( set +e ; "${DOCKER_MACHINE}" status "${VM}" )"
   28  if [ "${VM_STATUS}" != "Running" ]; then   "${DOCKER_MACHINE}" start "${VM}";   yes | "${DOCKER_MACHINE}" regenerate-certs "${VM}"; fi
   29  STEP="Setting env"
   30  eval "$("${DOCKER_MACHINE}" env --shell=bash --no-proxy "${VM}" | sed -e "s/export/SETX/g" | sed -e "s/=/ /g")" &> /dev/null #for persistent Environment Variables, available in next sessions
   31  eval "$("${DOCKER_MACHINE}" env --shell=bash --no-proxy "${VM}")" #for transient Environment Variables, available in current session
   32  STEP="Finalize"
   33  clear
   34  cat << EOF
   35                          ##         .
   36                    ## ## ##        ==
   37                 ## ## ## ## ##    ===
   38             /"""""""""""""""""\___/ ===
   39        ~~~ {~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~
   40             \______ o           __/
   41               \    \         __/
   42                \____\_______/
   43  EOF
   44  echo -e "${BLUE}docker${NC} is configured to use the ${GREEN}${VM}${NC} machine with IP ${GREEN}$("${DOCKER_MACHINE}" ip ${VM})${NC}"
   45  echo "For help getting started, check out the docs at https://docs.docker.com"
   46  echo
   47  echo 
   48  #cd #Bad: working dir should be whatever directory was invoked from rather than fixed to the Home folder
   49  docker () {   MSYS_NO_PATHCONV=1 docker.exe "$@"; }
   50  export -f docker
   51  if [ $# -eq 0 ]; then   echo "Start interactive shell";   exec "$BASH" --login -i; else   echo "Start shell with command";   exec "$BASH" -c "$*"; fi
   52  docker login
   53  docker login --help
   54  docker login -help
   55  #!/bin/bash
   56  trap '[ "$?" -eq 0 ] || read -p "Looks like something went wrong in step ´$STEP´... Press any key to continue..."' EXIT
   57  #Quick Hack: used to convert e.g. "C:\Program Files\Docker Toolbox" to "/c/Program Files/Docker Toolbox"
   58  win_to_unix_path(){  	wd="$(pwd)"; 	cd "$1"; 		the_path="$(pwd)"; 	cd "$wd"; 	echo $the_path; }
   59  # This is needed  to ensure that binaries provided
   60  # by Docker Toolbox over-ride binaries provided by
   61  # Docker for Windows when launching using the Quickstart.
   62  export PATH="$(win_to_unix_path "${DOCKER_TOOLBOX_INSTALL_PATH}"):$PATH"
   63  VM=${DOCKER_MACHINE_NAME-default}
   64  DOCKER_MACHINE="${DOCKER_TOOLBOX_INSTALL_PATH}\docker-machine.exe"
   65  STEP="Looking for vboxmanage.exe"
   66  if [ ! -z "$VBOX_MSI_INSTALL_PATH" ]; then   VBOXMANAGE="${VBOX_MSI_INSTALL_PATH}VBoxManage.exe"; else   VBOXMANAGE="${VBOX_INSTALL_PATH}VBoxManage.exe"; fi
   67  BLUE='\033[1;34m'
   68  GREEN='\033[0;32m'
   69  NC='\033[0m'
   70  #clear all_proxy if not socks address
   71  if  [[ $ALL_PROXY != socks* ]]; then   unset ALL_PROXY; fi
   72  if  [[ $all_proxy != socks* ]]; then   unset all_proxy; fi
   73  if [ ! -f "${DOCKER_MACHINE}" ]; then   echo "Docker Machine is not installed. Please re-run the Toolbox Installer and try again.";   exit 1; fi
   74  if [ ! -f "${VBOXMANAGE}" ]; then   echo "VirtualBox is not installed. Please re-run the Toolbox Installer and try again.";   exit 1; fi
   75  "${VBOXMANAGE}" list vms | grep \""${VM}"\" &> /dev/null
   76  VM_EXISTS_CODE=$?
   77  set -e
   78  STEP="Checking if machine $VM exists"
   79  if [ $VM_EXISTS_CODE -eq 1 ]; then   "${DOCKER_MACHINE}" rm -f "${VM}" &> /dev/null || :;   rm -rf ~/.docker/machine/machines/"${VM}"   if [ "${HTTP_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env HTTP_PROXY=$HTTP_PROXY";   fi;   if [ "${HTTPS_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env HTTPS_PROXY=$HTTPS_PROXY";   fi;   if [ "${NO_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env NO_PROXY=$NO_PROXY";   fi;   "${DOCKER_MACHINE}" create -d virtualbox $PROXY_ENV "${VM}"; fi
   80  STEP="Checking status on $VM"
   81  VM_STATUS="$( set +e ; "${DOCKER_MACHINE}" status "${VM}" )"
   82  if [ "${VM_STATUS}" != "Running" ]; then   "${DOCKER_MACHINE}" start "${VM}";   yes | "${DOCKER_MACHINE}" regenerate-certs "${VM}"; fi
   83  STEP="Setting env"
   84  eval "$("${DOCKER_MACHINE}" env --shell=bash --no-proxy "${VM}" | sed -e "s/export/SETX/g" | sed -e "s/=/ /g")" &> /dev/null #for persistent Environment Variables, available in next sessions
   85  eval "$("${DOCKER_MACHINE}" env --shell=bash --no-proxy "${VM}")" #for transient Environment Variables, available in current session
   86  STEP="Finalize"
   87  clear
   88  cat << EOF
   89                          ##         .
   90                    ## ## ##        ==
   91                 ## ## ## ## ##    ===
   92             /"""""""""""""""""\___/ ===
   93        ~~~ {~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~
   94             \______ o           __/
   95               \    \         __/
   96                \____\_______/
   97  EOF
   98  echo -e "${BLUE}docker${NC} is configured to use the ${GREEN}${VM}${NC} machine with IP ${GREEN}$("${DOCKER_MACHINE}" ip ${VM})${NC}"
   99  echo "For help getting started, check out the docs at https://docs.docker.com"
  100  echo
  101  echo 
  102  #cd #Bad: working dir should be whatever directory was invoked from rather than fixed to the Home folder
  103  docker () {   MSYS_NO_PATHCONV=1 docker.exe "$@"; }
  104  export -f docker
  105  if [ $# -eq 0 ]; then   echo "Start interactive shell";   exec "$BASH" --login -i; else   echo "Start shell with command";   exec "$BASH" -c "$*"; fi
  106  docker-machine ps
  107  docker-machine ls
  108  docker-machine start dockerDemo
  109  docker-machine env dockerDemo
  110  eval $("C:\Program Files\Docker Toolbox\docker-machine.exe" env dockerDemo)
  111  docker-machine active
  112  docker network COMMAND
  113  docker network create dockerNet
  114  docker network ls
  115  docker ps
  116  docker ps - a
  117  docker ps -a
  118  docker container start volume_test
  119  docker container start bharathiraja
  120  docker network connect bharathiraja
  121  docker network connect dockerNet bharathiraja
  122  docker container inspect dockerNet
  123  docker network inspect dockerNet
  124  docker run --network dockerNet --name myos -dit ubuntu /bin/bash
  125  docker container inspect myos
  126  docker image ls
  127  docker login 
  128  docker container inspect bridge
  129  docker-container inspect bridge
  130  docker-machine inspect bridge
  131  docker inspect bridge
  132  docker network disconnect bridge bharathiraja
  133  docker inspect bridge
  134  docker image ls
  135  docker image tag hello-world bharathiraja/helloworld:v1.0
  136  docker image ls
  137  docker push bharathirajas/helloworld
  138  docker push bharathiraja/helloworld
  139  docker image rm bharathiraja/helloworld
  140  docker image --help
  141  docker image ls
  142  docker push bharathiraja/helloworld:bharathiraja/helloworldv1.0
  143  docker push bharathiraja/helloworld:bharathiraja/helloworld:v1.0
  144  docker image rm bharathiraja/helloworld:1.0
  145* docker image rm fce2
  146  docker image rm bharathiraja/helloworld:v1.0
  147  docker image ls
  148  docker image tag hello-world bharathirajas/helloworld:v1.0
  149  docker image ls
  150  docker push bharathirajas/helloworld
  151  docker run -d --name=gitblit     -p 8080:8080 -p 8443:8443     -p 9418:9418 -p 29418:29418 \
  152  docker pull jacekkow/gitblit
  153  docker pull jacekkow/gitblit
  154  docker run -d --name=gitblit -p 8080:8080 -p 8443:8443 -p 9418:9418 -p 29418:29418 jacekkow/gitblit
  155  docker-machine ip bharathiraja
  156  docker-machine ls
  157  docker-machine ip dockerDemo
  158  docker container ls
  159  docker container stop 36bcb60f2338
  160  docker container rm 36bcb60f2338 
  161  docker run -d --name=gitblit -p 8080:8080 -p 8443:8443 -p 9418:9418 -p 29418:29418 --mount type=volume,source=volume_test,target=/opt/gitblit-data jacekkow/gitblit
  162  docker container ls
  163  docker history dockerDemo
  164  docker image ls
  165  docker dockerDemo history
  166  docker -help
  167  docker history dockerDemo
  168  docker image ls
  169  docker history bharathirajas/bharathiraja_ubuntu
  170  docker history hello-world
  171  docker history bharathirajas/bharathiraja_ubuntu:v1.0
  172  git -version
  173  git version
  174  pwd
  175  cd d:
  176  pwd
  177  mkdir repos
  178  cd repos/
  179  ls
  180  mkdir firstrepo
  181  cd firstrepo/
  182  git init
  183  cat .git/
  184  cd .git/
  185  ls
  186  cd ..
  187  ls
  188  touch test
  189  git status
  190  git add test
  191  git status
  192  git commit -m "first commit" test
  193  git config --global --list
  194  git config --list
  195  git config --list --global
  196  git config --local user.name "BRS"
  197  git commit -m "first commit" test
  198  git config --local user.email "brs@gmail.com"
  199  git commit -m "first commit" test
  200  git remote add origin ssh://admin@192.168.99.101:29418/firstrepo.git
  201  git push -u origin master
  202  cd ..
  203  mkdir flowrepo
  204  cd flowrepo/
  205  ls
  206  git flow init
  207  git config --global user.name "BRS"
  208  git config --global user.email "brs@gmail.com"
  209  git flow init
  210  git flow feature start feature1
  211  touh test
  212  touch test
  213  vim test
  214  git flow feature
  215  git flow feature feature1
  216  git flow feature finish feature1
  217  git flow release start v1.0
  218  git add test
  219  git commit -m "commit" test
  220  git status
  221  git flow release finish 'v1.0'
  222  git add test1
  223  git flow release finish 'v1.0'
  224  git remote add origin ssh://admin@192.168.99.101:29418/flowrepo.git
  225  git push --all
  226  git set upstream
  227  git branch set upstream
  228  git branch --set -upstream
  229  git branch --set-upstream
  230  docker container ls
  231  docker container prune
  232  docker ps
  233  docker container stop 34875f95ad9e 
  234  docker container stop fae29cc29f7f 
  235  docker container prune
  236  docker ps
  237  docker volume ls
  238  docker run -d --name "jenkins" -port 9090:8080 -p 50000:50000 --mount type=volume,source=volume1,target=/var/jenkins_home jenkins 
  239  docker run -d --name "jenkins" --port 9090:8080 -p 50000:50000 --mount type=volume,source=volume1,target=/var/jenkins_home jenkins 
  240  docker run -d --name "jenkins" -p 9090:8080 -p 50000:50000 --mount type=volume,source=volume1,target=/var/jenkins_home jenkins 
  241  docker image ls
  242  docker image rm jenkins
  243  docker image rm --force jenkins
  244  docker run -d --name "jenkins" -p 8085:8080 -p 50000:50000 --mount type=volume,source=volume1,target=/var/jenkins_home jenkins 
  245  docker ps
  246  docker container rm --force e423965b8ec4 
  247* 
  248  docker ps
  249  docker exec 35cd23667bcd 
  250  docker exec 35cd23667bcd bash
  251  docker exec -it 35cd23667bcd bash
  252  docker container ls
  253  history | tail -20
  254  docker volume ls
  255  history >> /d/day2
  256  history >> /d/day2_cmd_history
